/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    articles: Article;
    media: Media;
    users: User;
    yachts: Yacht;
    charters: Charter;
    categories: Category;
    destinations: Destination;
    events: Event;
    partners: Partner;
    shipyards: Shipyard;
    recruitment: Recruitment;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articles".
 */
export interface Article {
  id: string;
  title: string;
  category: string | Category;
  date: string;
  author: string | User;
  content: {
    [k: string]: unknown;
  }[];
  image: string | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  roles?: ('admin' | 'user')[] | null;
  picture?: string | Media | null;
  position: string;
  phones?:
    | {
        prefix?: string | null;
        number?: string | null;
        id?: string | null;
      }[]
    | null;
  langs: {
    lang?: string | null;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "yachts".
 */
export interface Yacht {
  id: string;
  name: string;
  model: string;
  price: number;
  LOA: number;
  beam: number;
  broker: string | User;
  builder: string;
  category: string;
  city: string;
  continent: string;
  country: string;
  cruising: boolean;
  crypto: boolean;
  length: number;
  state: string;
  material: string;
  maxDraft: number;
  minDraft: number;
  region: string;
  rooms: number;
  sleeps: number;
  subcategory: string;
  tonnage: number;
  yearBuilt: number;
  yearModel: number;
  featured: boolean;
  keyFeatures: (
    | 'price'
    | 'LOA'
    | 'beam'
    | 'builder'
    | 'category'
    | 'crusing'
    | 'crypto'
    | 'length'
    | 'maxDraft'
    | 'minDraft'
    | 'rooms'
    | 'sleeps'
    | 'subcategory'
    | 'tonnage'
    | 'yearBuilt'
    | 'yearModel'
  )[];
  photos: {
    featured: string | Media;
    gallery?:
      | {
          image: string | Media;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "charters".
 */
export interface Charter {
  id: string;
  name: string;
  model: string;
  price: number;
  LOA: number;
  beam: number;
  broker: string | User;
  builder: string;
  category: string;
  city: string;
  continent: string;
  country: string;
  cruising: boolean;
  crypto: boolean;
  length: number;
  state: string;
  material: string;
  maxDraft: number;
  minDraft: number;
  region: string;
  rooms: number;
  sleeps: number;
  subcategory: string;
  tonnage: number;
  yearBuilt: number;
  yearModel: number;
  featured: boolean;
  keyFeatures: (
    | 'price'
    | 'LOA'
    | 'beam'
    | 'builder'
    | 'category'
    | 'crusing'
    | 'crypto'
    | 'length'
    | 'maxDraft'
    | 'minDraft'
    | 'rooms'
    | 'sleeps'
    | 'subcategory'
    | 'tonnage'
    | 'yearBuilt'
    | 'yearModel'
  )[];
  photos: {
    featured: string | Media;
    gallery?:
      | {
          image: string | Media;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "destinations".
 */
export interface Destination {
  id: string;
  destination: string;
  country: string;
  region: string;
  continent: string;
  photos: {
    featured: string | Media;
    destinationPhoto: string | Media;
  };
  description: string;
  info: {
    bestTimeToVisit: string;
    languages: string;
    gettingThere: string;
    currency: string;
  };
  /**
   * @minItems 2
   * @maxItems 2
   */
  coordinates?: [number, number] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  title: string;
  fromDate: string;
  toDate: string;
  content?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  image: string | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners".
 */
export interface Partner {
  id: string;
  name: string;
  quote: string;
  comment: string;
  logo: string | Media;
  banner: string | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shipyards".
 */
export interface Shipyard {
  id: string;
  name: string;
  quote: string;
  website: string;
  logo: string | Media;
  banner: string | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "recruitment".
 */
export interface Recruitment {
  id: string;
  title: string;
  description: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}